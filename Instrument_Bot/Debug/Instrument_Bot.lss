
Instrument_Bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000be6  00800200  000007e2  00000876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800de6  00800de6  0000145c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7c  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e09  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ade  00000000  00000000  00004129  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00004c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000757  00000000  00000000  00004e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b92  00000000  00000000  0000555f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000060f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_45>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	1d e0       	ldi	r17, 0x0D	; 13
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ee       	ldi	r30, 0xE2	; 226
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 3e       	cpi	r26, 0xE6	; 230
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2d e0       	ldi	r18, 0x0D	; 13
 110:	a6 ee       	ldi	r26, 0xE6	; 230
 112:	bd e0       	ldi	r27, 0x0D	; 13
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 3e       	cpi	r26, 0xEC	; 236
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 8a 02 	call	0x514	; 0x514 <main>
 122:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <uart0_init>:
int len=0;
int note_number=0;
char nt[3];
void time_calc()
{
	tim=60*(float)(((timer_reset*65536)+TCNT4)/(float)14745600);
 12a:	e1 ec       	ldi	r30, 0xC1	; 193
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	10 82       	st	Z, r1
 130:	8f e5       	ldi	r24, 0x5F	; 95
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 138:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 13c:	a2 ec       	ldi	r26, 0xC2	; 194
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	86 60       	ori	r24, 0x06	; 6
 144:	8c 93       	st	X, r24
 146:	80 81       	ld	r24, Z
 148:	88 61       	ori	r24, 0x18	; 24
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <uart_tx>:
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	95 ff       	sbrs	r25, 5
 156:	fd cf       	rjmp	.-6      	; 0x152 <uart_tx+0x4>
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 15c:	08 95       	ret

0000015e <uart_tx_string>:
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	88 81       	ld	r24, Y
 166:	88 23       	and	r24, r24
 168:	31 f0       	breq	.+12     	; 0x176 <uart_tx_string+0x18>
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	0e 94 a7 00 	call	0x14e	; 0x14e <uart_tx>
 170:	89 91       	ld	r24, Y+
 172:	81 11       	cpse	r24, r1
 174:	fb cf       	rjmp	.-10     	; 0x16c <uart_tx_string+0xe>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <lcd_port_config>:
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	87 6f       	ori	r24, 0xF7	; 247
 180:	87 b9       	out	0x07, r24	; 7
 182:	88 b1       	in	r24, 0x08	; 8
 184:	88 70       	andi	r24, 0x08	; 8
 186:	88 b9       	out	0x08, r24	; 8
 188:	08 95       	ret

0000018a <lcd_set_4bit>:
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	9e e0       	ldi	r25, 0x0E	; 14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0x4>
 192:	00 00       	nop
 194:	40 98       	cbi	0x08, 0	; 8
 196:	41 98       	cbi	0x08, 1	; 8
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	42 9a       	sbi	0x08, 2	; 8
 19e:	ef ef       	ldi	r30, 0xFF	; 255
 1a0:	f7 e4       	ldi	r31, 0x47	; 71
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x18>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x1e>
 1a8:	00 00       	nop
 1aa:	42 98       	cbi	0x08, 2	; 8
 1ac:	e6 e6       	ldi	r30, 0x66	; 102
 1ae:	fe e0       	ldi	r31, 0x0E	; 14
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x26>
 1b4:	00 00       	nop
 1b6:	40 98       	cbi	0x08, 0	; 8
 1b8:	41 98       	cbi	0x08, 1	; 8
 1ba:	88 b9       	out	0x08, r24	; 8
 1bc:	42 9a       	sbi	0x08, 2	; 8
 1be:	ef ef       	ldi	r30, 0xFF	; 255
 1c0:	f7 e4       	ldi	r31, 0x47	; 71
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_set_4bit+0x38>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_set_4bit+0x3e>
 1c8:	00 00       	nop
 1ca:	42 98       	cbi	0x08, 2	; 8
 1cc:	e6 e6       	ldi	r30, 0x66	; 102
 1ce:	fe e0       	ldi	r31, 0x0E	; 14
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_set_4bit+0x46>
 1d4:	00 00       	nop
 1d6:	40 98       	cbi	0x08, 0	; 8
 1d8:	41 98       	cbi	0x08, 1	; 8
 1da:	88 b9       	out	0x08, r24	; 8
 1dc:	42 9a       	sbi	0x08, 2	; 8
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	97 e4       	ldi	r25, 0x47	; 71
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_set_4bit+0x58>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_set_4bit+0x5e>
 1e8:	00 00       	nop
 1ea:	42 98       	cbi	0x08, 2	; 8
 1ec:	e6 e6       	ldi	r30, 0x66	; 102
 1ee:	fe e0       	ldi	r31, 0x0E	; 14
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_set_4bit+0x66>
 1f4:	00 00       	nop
 1f6:	40 98       	cbi	0x08, 0	; 8
 1f8:	41 98       	cbi	0x08, 1	; 8
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	88 b9       	out	0x08, r24	; 8
 1fe:	42 9a       	sbi	0x08, 2	; 8
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	97 e4       	ldi	r25, 0x47	; 71
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x7a>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x80>
 20a:	00 00       	nop
 20c:	42 98       	cbi	0x08, 2	; 8
 20e:	08 95       	ret

00000210 <lcd_wr_command>:
 210:	98 b1       	in	r25, 0x08	; 8
 212:	9f 70       	andi	r25, 0x0F	; 15
 214:	98 b9       	out	0x08, r25	; 8
 216:	98 b1       	in	r25, 0x08	; 8
 218:	28 2f       	mov	r18, r24
 21a:	20 7f       	andi	r18, 0xF0	; 240
 21c:	92 2b       	or	r25, r18
 21e:	98 b9       	out	0x08, r25	; 8
 220:	40 98       	cbi	0x08, 0	; 8
 222:	41 98       	cbi	0x08, 1	; 8
 224:	42 9a       	sbi	0x08, 2	; 8
 226:	ef ef       	ldi	r30, 0xFF	; 255
 228:	f7 e4       	ldi	r31, 0x47	; 71
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_wr_command+0x1a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_wr_command+0x20>
 230:	00 00       	nop
 232:	42 98       	cbi	0x08, 2	; 8
 234:	98 b1       	in	r25, 0x08	; 8
 236:	9f 70       	andi	r25, 0x0F	; 15
 238:	98 b9       	out	0x08, r25	; 8
 23a:	98 b1       	in	r25, 0x08	; 8
 23c:	82 95       	swap	r24
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	89 2b       	or	r24, r25
 242:	88 b9       	out	0x08, r24	; 8
 244:	40 98       	cbi	0x08, 0	; 8
 246:	41 98       	cbi	0x08, 1	; 8
 248:	42 9a       	sbi	0x08, 2	; 8
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	97 e4       	ldi	r25, 0x47	; 71
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_wr_command+0x3e>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_wr_command+0x44>
 254:	00 00       	nop
 256:	42 98       	cbi	0x08, 2	; 8
 258:	08 95       	ret

0000025a <lcd_init>:
 25a:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_set_4bit>
 25e:	86 e6       	ldi	r24, 0x66	; 102
 260:	9e e0       	ldi	r25, 0x0E	; 14
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x8>
 266:	00 00       	nop
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 280:	80 e8       	ldi	r24, 0x80	; 128
 282:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 286:	08 95       	ret

00000288 <lcd_wr_char>:
 288:	98 b1       	in	r25, 0x08	; 8
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	98 b9       	out	0x08, r25	; 8
 28e:	98 b1       	in	r25, 0x08	; 8
 290:	28 2f       	mov	r18, r24
 292:	20 7f       	andi	r18, 0xF0	; 240
 294:	92 2b       	or	r25, r18
 296:	98 b9       	out	0x08, r25	; 8
 298:	40 9a       	sbi	0x08, 0	; 8
 29a:	41 98       	cbi	0x08, 1	; 8
 29c:	42 9a       	sbi	0x08, 2	; 8
 29e:	ef ef       	ldi	r30, 0xFF	; 255
 2a0:	f7 e4       	ldi	r31, 0x47	; 71
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_wr_char+0x1a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_wr_char+0x20>
 2a8:	00 00       	nop
 2aa:	42 98       	cbi	0x08, 2	; 8
 2ac:	98 b1       	in	r25, 0x08	; 8
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	98 b9       	out	0x08, r25	; 8
 2b2:	98 b1       	in	r25, 0x08	; 8
 2b4:	82 95       	swap	r24
 2b6:	80 7f       	andi	r24, 0xF0	; 240
 2b8:	89 2b       	or	r24, r25
 2ba:	88 b9       	out	0x08, r24	; 8
 2bc:	40 9a       	sbi	0x08, 0	; 8
 2be:	41 98       	cbi	0x08, 1	; 8
 2c0:	42 9a       	sbi	0x08, 2	; 8
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	97 e4       	ldi	r25, 0x47	; 71
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_wr_char+0x3e>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_wr_char+0x44>
 2cc:	00 00       	nop
 2ce:	42 98       	cbi	0x08, 2	; 8
 2d0:	08 95       	ret

000002d2 <lcd_clear>:
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 2d8:	08 95       	ret

000002da <lcd_string>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	88 81       	ld	r24, Y
 2e2:	88 23       	and	r24, r24
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <lcd_string+0x18>
 2e6:	21 96       	adiw	r28, 0x01	; 1
 2e8:	0e 94 44 01 	call	0x288	; 0x288 <lcd_wr_char>
 2ec:	89 91       	ld	r24, Y+
 2ee:	81 11       	cpse	r24, r1
 2f0:	fb cf       	rjmp	.-10     	; 0x2e8 <lcd_string+0xe>
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <lcd_cursor>:
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	71 f0       	breq	.+28     	; 0x318 <lcd_cursor+0x20>
 2fc:	18 f4       	brcc	.+6      	; 0x304 <lcd_cursor+0xc>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	31 f0       	breq	.+12     	; 0x30e <lcd_cursor+0x16>
 302:	08 95       	ret
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	69 f0       	breq	.+26     	; 0x322 <lcd_cursor+0x2a>
 308:	84 30       	cpi	r24, 0x04	; 4
 30a:	81 f0       	breq	.+32     	; 0x32c <lcd_cursor+0x34>
 30c:	08 95       	ret
 30e:	8f e7       	ldi	r24, 0x7F	; 127
 310:	86 0f       	add	r24, r22
 312:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 316:	08 95       	ret
 318:	8f eb       	ldi	r24, 0xBF	; 191
 31a:	86 0f       	add	r24, r22
 31c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 320:	08 95       	ret
 322:	83 e9       	ldi	r24, 0x93	; 147
 324:	86 0f       	add	r24, r22
 326:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 32a:	08 95       	ret
 32c:	83 ed       	ldi	r24, 0xD3	; 211
 32e:	86 0f       	add	r24, r22
 330:	0e 94 08 01 	call	0x210	; 0x210 <lcd_wr_command>
 334:	08 95       	ret

00000336 <boot_switch_pin_config>:
 336:	56 98       	cbi	0x0a, 6	; 10
 338:	5e 9a       	sbi	0x0b, 6	; 11
 33a:	08 95       	ret

0000033c <timer4_init>:
 33c:	e1 ea       	ldi	r30, 0xA1	; 161
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	10 82       	st	Z, r1
 342:	89 ef       	ldi	r24, 0xF9	; 249
 344:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 348:	83 eb       	ldi	r24, 0xB3	; 179
 34a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 34e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 352:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 356:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
 35a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
 35e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
 362:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
 366:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 36a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 36e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 372:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <check_boot_press>:
 37c:	4e 9b       	sbis	0x09, 6	; 9
 37e:	05 c0       	rjmp	.+10     	; 0x38a <check_boot_press+0xe>
 380:	10 92 eb 0d 	sts	0x0DEB, r1	; 0x800deb <switch_flag+0x1>
 384:	10 92 ea 0d 	sts	0x0DEA, r1	; 0x800dea <switch_flag>
 388:	08 95       	ret
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	90 93 eb 0d 	sts	0x0DEB, r25	; 0x800deb <switch_flag+0x1>
 392:	80 93 ea 0d 	sts	0x0DEA, r24	; 0x800dea <switch_flag>
 396:	88 eb       	ldi	r24, 0xB8	; 184
 398:	9d e0       	ldi	r25, 0x0D	; 13
 39a:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
 39e:	86 ed       	ldi	r24, 0xD6	; 214
 3a0:	9d e0       	ldi	r25, 0x0D	; 13
 3a2:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
 3a6:	08 95       	ret

000003a8 <S_config>:
 3a8:	81 b1       	in	r24, 0x01	; 1
 3aa:	11 b8       	out	0x01, r1	; 1
 3ac:	82 b1       	in	r24, 0x02	; 2
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	82 b9       	out	0x02, r24	; 2
 3b2:	08 95       	ret

000003b4 <__vector_45>:
}

ISR(TIMER4_OVF_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
	timer_reset++;
 3c2:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <timer_reset>
 3c6:	90 91 e9 0d 	lds	r25, 0x0DE9	; 0x800de9 <timer_reset+0x1>
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	90 93 e9 0d 	sts	0x0DE9, r25	; 0x800de9 <timer_reset+0x1>
 3d0:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <timer_reset>
}
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <data>:
void data(int note_no, char str[1], char str2){
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <data+0x10>
 3f2:	1f 92       	push	r1
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	8c 01       	movw	r16, r24
 3fa:	7b 01       	movw	r14, r22
 3fc:	d4 2e       	mov	r13, r20
	char arr[4]={};
 3fe:	19 82       	std	Y+1, r1	; 0x01
 400:	1a 82       	std	Y+2, r1	; 0x02
 402:	1b 82       	std	Y+3, r1	; 0x03
 404:	1c 82       	std	Y+4, r1	; 0x04
	note_number++;
 406:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 40a:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 e7 0d 	sts	0x0DE7, r25	; 0x800de7 <__data_end+0x1>
 414:	80 93 e6 0d 	sts	0x0DE6, r24	; 0x800de6 <__data_end>
	if(note_number>strlen(octave))
 418:	e0 e0       	ldi	r30, 0x00	; 0
 41a:	f2 e0       	ldi	r31, 0x02	; 2
 41c:	01 90       	ld	r0, Z+
 41e:	00 20       	and	r0, r0
 420:	e9 f7       	brne	.-6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	e0 50       	subi	r30, 0x00	; 0
 426:	f2 40       	sbci	r31, 0x02	; 2
 428:	e8 17       	cp	r30, r24
 42a:	f9 07       	cpc	r31, r25
 42c:	20 f4       	brcc	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	{
		note_number=0;
 42e:	10 92 e7 0d 	sts	0x0DE7, r1	; 0x800de7 <__data_end+0x1>
 432:	10 92 e6 0d 	sts	0x0DE6, r1	; 0x800de6 <__data_end>
	}
	itoa(octave[note_no],arr,10);
 436:	f8 01       	movw	r30, r16
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	e0 50       	subi	r30, 0x00	; 0
 43e:	fe 4f       	sbci	r31, 0xFE	; 254
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 440:	4a e0       	ldi	r20, 0x0A	; 10
 442:	be 01       	movw	r22, r28
 444:	6f 5f       	subi	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	80 81       	ld	r24, Z
 44a:	91 81       	ldd	r25, Z+1	; 0x01
 44c:	0e 94 ca 03 	call	0x794	; 0x794 <__itoa_ncheck>
	if(str2=='P')
 450:	80 e5       	ldi	r24, 0x50	; 80
 452:	d8 12       	cpse	r13, r24
 454:	22 c0       	rjmp	.+68     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	{
		uart_tx_string("Piano\n");
 456:	8a eb       	ldi	r24, 0xBA	; 186
 458:	9d e0       	ldi	r25, 0x0D	; 13
 45a:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
		if(sharp[note_no]=='Y')
 45e:	f8 01       	movw	r30, r16
 460:	e0 53       	subi	r30, 0x30	; 48
 462:	f6 4f       	sbci	r31, 0xF6	; 246
 464:	80 81       	ld	r24, Z
 466:	89 35       	cpi	r24, 0x59	; 89
 468:	51 f4       	brne	.+20     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		strcat(arr,"#");              ///This transmits the C and when it is sharp and when it is
 46a:	fe 01       	movw	r30, r28
 46c:	31 96       	adiw	r30, 0x01	; 1
 46e:	01 90       	ld	r0, Z+
 470:	00 20       	and	r0, r0
 472:	e9 f7       	brne	.-6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	83 e2       	ldi	r24, 0x23	; 35
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	91 83       	std	Z+1, r25	; 0x01
 47c:	80 83       	st	Z, r24
		uart_tx_string(strrev(strcat(arr,str)));
 47e:	b7 01       	movw	r22, r14
 480:	ce 01       	movw	r24, r28
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	0e 94 af 03 	call	0x75e	; 0x75e <strcat>
 488:	0e 94 ba 03 	call	0x774	; 0x774 <strrev>
 48c:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
		uart_tx_string("\n");
 490:	86 ed       	ldi	r24, 0xD6	; 214
 492:	9d e0       	ldi	r25, 0x0D	; 13
 494:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
 498:	21 c0       	rjmp	.+66     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		arr[0]='\0';
		
	}
	else
	{
		uart_tx_string("Trumpet\n");
 49a:	81 ec       	ldi	r24, 0xC1	; 193
 49c:	9d e0       	ldi	r25, 0x0D	; 13
 49e:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
		if(sharp[note_no]=='Y')
 4a2:	f8 01       	movw	r30, r16
 4a4:	e0 53       	subi	r30, 0x30	; 48
 4a6:	f6 4f       	sbci	r31, 0xF6	; 246
 4a8:	80 81       	ld	r24, Z
 4aa:	89 35       	cpi	r24, 0x59	; 89
 4ac:	51 f4       	brne	.+20     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		strcat(arr,"#");              ///This transmits the C and when it is sharp and when it is
 4ae:	fe 01       	movw	r30, r28
 4b0:	31 96       	adiw	r30, 0x01	; 1
 4b2:	01 90       	ld	r0, Z+
 4b4:	00 20       	and	r0, r0
 4b6:	e9 f7       	brne	.-6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b8:	31 97       	sbiw	r30, 0x01	; 1
 4ba:	83 e2       	ldi	r24, 0x23	; 35
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	91 83       	std	Z+1, r25	; 0x01
 4c0:	80 83       	st	Z, r24
		uart_tx_string(strrev(strcat(arr,str)));
 4c2:	b7 01       	movw	r22, r14
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	0e 94 af 03 	call	0x75e	; 0x75e <strcat>
 4cc:	0e 94 ba 03 	call	0x774	; 0x774 <strrev>
 4d0:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
		uart_tx_string("\n");
 4d4:	86 ed       	ldi	r24, 0xD6	; 214
 4d6:	9d e0       	ldi	r25, 0x0D	; 13
 4d8:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
		//lcd_cursor(2,1);
		//lcd_string(arr);
		arr[0]='\0';
		
	}
}
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	08 95       	ret

000004f4 <init_devices>:



void init_devices (void)
{
	cli(); //Clears the global interrupts
 4f4:	f8 94       	cli
	lcd_port_config();
 4f6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_port_config>
	S_config();
 4fa:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <S_config>
	boot_switch_pin_config();
 4fe:	0e 94 9b 01 	call	0x336	; 0x336 <boot_switch_pin_config>
	uart0_init();
 502:	0e 94 95 00 	call	0x12a	; 0x12a <uart0_init>
	timer4_init();
 506:	0e 94 9e 01 	call	0x33c	; 0x33c <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	sei(); //Enables the global interrupts
 510:	78 94       	sei
 512:	08 95       	ret

00000514 <main>:
}

int main(void){
	init_devices();
 514:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <init_devices>
	lcd_init();
 518:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_init>
	lcd_set_4bit();
 51c:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_set_4bit>
	init_devices();
 520:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <init_devices>
	lcd_clear();
 524:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_clear>
	lcd_cursor(1,5);
 528:	65 e0       	ldi	r22, 0x05	; 5
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_cursor>
/*************************************************************Boot Key*****************************************/
	while (1)
	{
		check_boot_press();
 530:	0e 94 be 01 	call	0x37c	; 0x37c <check_boot_press>
		lcd_string("Boot");
 534:	8a ec       	ldi	r24, 0xCA	; 202
 536:	9d e0       	ldi	r25, 0x0D	; 13
 538:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_string>
		if(switch_flag==1)						/////////Press the boot key first time to initiate data transmission
 53c:	80 91 ea 0d 	lds	r24, 0x0DEA	; 0x800dea <switch_flag>
 540:	90 91 eb 0d 	lds	r25, 0x0DEB	; 0x800deb <switch_flag+0x1>
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	a1 f7       	brne	.-24     	; 0x530 <main+0x1c>
		{
			lcd_clear();
 548:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_clear>
			lcd_string("Check");
 54c:	8f ec       	ldi	r24, 0xCF	; 207
 54e:	9d e0       	ldi	r25, 0x0D	; 13
 550:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 554:	2f ef       	ldi	r18, 0xFF	; 255
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	98 e0       	ldi	r25, 0x08	; 8
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0x46>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x50>
 564:	00 00       	nop
		//_delay_ms(10);
	}
	
/*___________________________Trumpet________________________________________*/
		
		if((PINK & 0xFF) != 0xFF)
 566:	c6 e0       	ldi	r28, 0x06	; 6
 568:	d1 e0       	ldi	r29, 0x01	; 1
		{
			_delay_ms(3);                                 //if key is pressed wait for switch debouncing	      
		}*/
			
/*------------------------Piano-----------------------------*/		
	if((PINA & 0xFF) == 0xFE)															//   End Key
 56a:	80 b1       	in	r24, 0x00	; 0
 56c:	8e 3f       	cpi	r24, 0xFE	; 254
 56e:	21 f4       	brne	.+8      	; 0x578 <main+0x64>
	{
		//lcd_clear();
		//lcd_cursor(1,1);
		//lcd_string("END");
		uart_tx_string("$\n");
 570:	85 ed       	ldi	r24, 0xD5	; 213
 572:	9d e0       	ldi	r25, 0x0D	; 13
 574:	0e 94 af 00 	call	0x15e	; 0x15e <uart_tx_string>
	}
	
	/********__C__********/
	if((PINA & 0xFF) == 0xFD)															
 578:	80 b1       	in	r24, 0x00	; 0
 57a:	8d 3f       	cpi	r24, 0xFD	; 253
 57c:	61 f4       	brne	.+24     	; 0x596 <main+0x82>
	{
		data(note_number,"C",'P');
 57e:	40 e5       	ldi	r20, 0x50	; 80
 580:	68 ed       	ldi	r22, 0xD8	; 216
 582:	7d e0       	ldi	r23, 0x0D	; 13
 584:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 588:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 58c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
		//_delay_ms(10);
		while(1)
		{
			if((PINA & 0XFF) == 0xFF)break;
 590:	80 b1       	in	r24, 0x00	; 0
 592:	8f 3f       	cpi	r24, 0xFF	; 255
 594:	e9 f7       	brne	.-6      	; 0x590 <main+0x7c>
		}
		//_delay_ms(10);
	}
	
	/********___D__********/
	if((PINA & 0xFF) == 0xFB)															
 596:	80 b1       	in	r24, 0x00	; 0
 598:	8b 3f       	cpi	r24, 0xFB	; 251
 59a:	61 f4       	brne	.+24     	; 0x5b4 <main+0xa0>
	{
		data(note_number,"D",'P');
 59c:	40 e5       	ldi	r20, 0x50	; 80
 59e:	6a ed       	ldi	r22, 0xDA	; 218
 5a0:	7d e0       	ldi	r23, 0x0D	; 13
 5a2:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 5a6:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 5aa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
		while(1)
		{
			if((PINA & 0XFF) == 0xFF)break;
 5ae:	80 b1       	in	r24, 0x00	; 0
 5b0:	8f 3f       	cpi	r24, 0xFF	; 255
 5b2:	e9 f7       	brne	.-6      	; 0x5ae <main+0x9a>
		}
		//_delay_ms(10);
	}
	
	/********___E__********/
	if((PINA & 0xFF) == 0xF7)															//E
 5b4:	80 b1       	in	r24, 0x00	; 0
 5b6:	87 3f       	cpi	r24, 0xF7	; 247
 5b8:	61 f4       	brne	.+24     	; 0x5d2 <main+0xbe>
	{
		data(note_number,"E",'P');
 5ba:	40 e5       	ldi	r20, 0x50	; 80
 5bc:	6c ed       	ldi	r22, 0xDC	; 220
 5be:	7d e0       	ldi	r23, 0x0D	; 13
 5c0:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 5c4:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 5c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
		while(1)
		{
			if((PINA & 0XFF) == 0xFF)break;
 5cc:	80 b1       	in	r24, 0x00	; 0
 5ce:	8f 3f       	cpi	r24, 0xFF	; 255
 5d0:	e9 f7       	brne	.-6      	; 0x5cc <main+0xb8>
		}
		//_delay_ms(10);
	}
	
	/********___F__********/
	if((PINA & 0xFF) == 0xEF)															//F
 5d2:	80 b1       	in	r24, 0x00	; 0
 5d4:	8f 3e       	cpi	r24, 0xEF	; 239
 5d6:	61 f4       	brne	.+24     	; 0x5f0 <main+0xdc>
	{
		data(note_number,"F",'P');
 5d8:	40 e5       	ldi	r20, 0x50	; 80
 5da:	6e ed       	ldi	r22, 0xDE	; 222
 5dc:	7d e0       	ldi	r23, 0x0D	; 13
 5de:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 5e2:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 5e6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
		while(1)
		{
			if((PINA & 0XFF) == 0xFF)break;
 5ea:	80 b1       	in	r24, 0x00	; 0
 5ec:	8f 3f       	cpi	r24, 0xFF	; 255
 5ee:	e9 f7       	brne	.-6      	; 0x5ea <main+0xd6>
		}
		//_delay_ms(10);
	}
	
	/********___G__********/
	if((PINA & 0xFF) == 0xDF)/////////////////////////////////////////////////////G
 5f0:	80 b1       	in	r24, 0x00	; 0
 5f2:	8f 3d       	cpi	r24, 0xDF	; 223
 5f4:	61 f4       	brne	.+24     	; 0x60e <main+0xfa>
	{
		data(note_number,"G",'P');
 5f6:	40 e5       	ldi	r20, 0x50	; 80
 5f8:	60 ee       	ldi	r22, 0xE0	; 224
 5fa:	7d e0       	ldi	r23, 0x0D	; 13
 5fc:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 600:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 604:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
		while(1)
		{
			if((PINA & 0XFF) == 0xFF)break;
 608:	80 b1       	in	r24, 0x00	; 0
 60a:	8f 3f       	cpi	r24, 0xFF	; 255
 60c:	e9 f7       	brne	.-6      	; 0x608 <main+0xf4>
		}
		//_delay_ms(10);
	}
	
	/********___A__********/
	if((PINA & 0xFF) == 0xBF)////////////////////////////////////////////////////A
 60e:	80 b1       	in	r24, 0x00	; 0
 610:	8f 3b       	cpi	r24, 0xBF	; 191
 612:	61 f4       	brne	.+24     	; 0x62c <main+0x118>
	{
		data(note_number,"A",'P');
 614:	40 e5       	ldi	r20, 0x50	; 80
 616:	62 ee       	ldi	r22, 0xE2	; 226
 618:	7d e0       	ldi	r23, 0x0D	; 13
 61a:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 61e:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 622:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
		while(1)
		{
			if((PINA & 0XFF) == 0xFF)break;
 626:	80 b1       	in	r24, 0x00	; 0
 628:	8f 3f       	cpi	r24, 0xFF	; 255
 62a:	e9 f7       	brne	.-6      	; 0x626 <main+0x112>
		}
		//_delay_ms(10);
	}
	
	/********___B__********/
	if((PINA & 0xFF) == 0x7F)//////////////////////////////////////////////////B
 62c:	80 b1       	in	r24, 0x00	; 0
 62e:	8f 37       	cpi	r24, 0x7F	; 127
 630:	61 f4       	brne	.+24     	; 0x64a <main+0x136>
	{
		data(note_number,"B",'P');
 632:	40 e5       	ldi	r20, 0x50	; 80
 634:	64 ee       	ldi	r22, 0xE4	; 228
 636:	7d e0       	ldi	r23, 0x0D	; 13
 638:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 63c:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 640:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
		while(1)
		{
			if((PINA & 0XFF) == 0xFF)break;
 644:	80 b1       	in	r24, 0x00	; 0
 646:	8f 3f       	cpi	r24, 0xFF	; 255
 648:	e9 f7       	brne	.-6      	; 0x644 <main+0x130>
		//_delay_ms(10);
	}
	
/*___________________________Trumpet________________________________________*/
		
		if((PINK & 0xFF) != 0xFF)
 64a:	88 81       	ld	r24, Y
 64c:	8f 3f       	cpi	r24, 0xFF	; 255
 64e:	41 f0       	breq	.+16     	; 0x660 <main+0x14c>
 650:	29 e9       	ldi	r18, 0x99	; 153
 652:	89 e5       	ldi	r24, 0x59	; 89
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	21 50       	subi	r18, 0x01	; 1
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	90 40       	sbci	r25, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0x142>
 65e:	00 00       	nop
			
			_delay_ms(30);                                 //if key is pressed wait for switch debouncing	      
		}
/*################******* Trumpet 1111 1110 Key***********##########################*/
            
			if(((PINK & 0xFF) == 0x06)) /////c
 660:	88 81       	ld	r24, Y
 662:	86 30       	cpi	r24, 0x06	; 6
 664:	79 f4       	brne	.+30     	; 0x684 <main+0x170>
			{
			data(note_number,"C",'T');
 666:	44 e5       	ldi	r20, 0x54	; 84
 668:	68 ed       	ldi	r22, 0xD8	; 216
 66a:	7d e0       	ldi	r23, 0x0D	; 13
 66c:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 670:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 674:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	9f e8       	ldi	r25, 0x8F	; 143
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <main+0x168>
 680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x16e>
 682:	00 00       	nop
			_delay_ms(10);
			}
		
/*################**********D Trumpet 1111 1101 Key********##########################*/
			if(((PINK & 0xFF) == 0x05)) /////D trumpet
 684:	88 81       	ld	r24, Y
 686:	85 30       	cpi	r24, 0x05	; 5
 688:	79 f4       	brne	.+30     	; 0x6a8 <main+0x194>
			{
				data(note_number,"D",'T');
 68a:	44 e5       	ldi	r20, 0x54	; 84
 68c:	6a ed       	ldi	r22, 0xDA	; 218
 68e:	7d e0       	ldi	r23, 0x0D	; 13
 690:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 694:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 698:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	9f e8       	ldi	r25, 0x8F	; 143
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <main+0x18c>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <main+0x192>
 6a6:	00 00       	nop
				_delay_ms(10);
			}
		
/*################**********E Trumpet 1111 1101 Key********##########################*/
	        if(((PINK & 0xFF) == 0x03)) ///// E trumpet            1111 1011
 6a8:	88 81       	ld	r24, Y
 6aa:	83 30       	cpi	r24, 0x03	; 3
 6ac:	79 f4       	brne	.+30     	; 0x6cc <main+0x1b8>
			{   
				data(note_number,"E",'T');
 6ae:	44 e5       	ldi	r20, 0x54	; 84
 6b0:	6c ed       	ldi	r22, 0xDC	; 220
 6b2:	7d e0       	ldi	r23, 0x0D	; 13
 6b4:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 6b8:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 6bc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
 6c0:	8f ef       	ldi	r24, 0xFF	; 255
 6c2:	9f e8       	ldi	r25, 0x8F	; 143
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <main+0x1b0>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0x1b6>
 6ca:	00 00       	nop
				_delay_ms(10);
			}
	
/*################**********F Trumpet 1111 1100 Key********##########################*/
			if(((PINK & 0xFF) == 0x04)) ////////F
 6cc:	88 81       	ld	r24, Y
 6ce:	84 30       	cpi	r24, 0x04	; 4
 6d0:	79 f4       	brne	.+30     	; 0x6f0 <main+0x1dc>
			{
				data(note_number,"F",'T');
 6d2:	44 e5       	ldi	r20, 0x54	; 84
 6d4:	6e ed       	ldi	r22, 0xDE	; 222
 6d6:	7d e0       	ldi	r23, 0x0D	; 13
 6d8:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 6dc:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 6e0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	9f e8       	ldi	r25, 0x8F	; 143
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <main+0x1d4>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <main+0x1da>
 6ee:	00 00       	nop
				_delay_ms(10);
			}
	
/*################**********G Trumpet 1111 1001 Key********##########################*/
			if(((PINK & 0xFF) == 0x01)) ///////G
 6f0:	88 81       	ld	r24, Y
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	79 f4       	brne	.+30     	; 0x714 <main+0x200>
			{
				data(note_number,"G",'T');
 6f6:	44 e5       	ldi	r20, 0x54	; 84
 6f8:	60 ee       	ldi	r22, 0xE0	; 224
 6fa:	7d e0       	ldi	r23, 0x0D	; 13
 6fc:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 700:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 704:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	9f e8       	ldi	r25, 0x8F	; 143
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <main+0x1f8>
 710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x1fe>
 712:	00 00       	nop
				_delay_ms(10);
			}

/*################**********A Trumpet 1111 1010 Key********##########################*/
	
			if(((PINK & 0xFF) == 0x02)) ///// A trumpet            
 714:	88 81       	ld	r24, Y
 716:	82 30       	cpi	r24, 0x02	; 2
 718:	79 f4       	brne	.+30     	; 0x738 <main+0x224>
			{	
				data(note_number,"A",'T');
 71a:	44 e5       	ldi	r20, 0x54	; 84
 71c:	62 ee       	ldi	r22, 0xE2	; 226
 71e:	7d e0       	ldi	r23, 0x0D	; 13
 720:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 724:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 728:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
 72c:	8f ef       	ldi	r24, 0xFF	; 255
 72e:	9f e8       	ldi	r25, 0x8F	; 143
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <main+0x21c>
 734:	00 c0       	rjmp	.+0      	; 0x736 <main+0x222>
 736:	00 00       	nop
				_delay_ms(10);
			}
	
/*################**********B Trumpet 1111 1000 Key********##########################*/
	
			if(((PINK & 0xFF) == 0x00))
 738:	88 81       	ld	r24, Y
 73a:	81 11       	cpse	r24, r1
 73c:	16 cf       	rjmp	.-468    	; 0x56a <main+0x56>
			{
				data(note_number,"B",'T');
 73e:	44 e5       	ldi	r20, 0x54	; 84
 740:	64 ee       	ldi	r22, 0xE4	; 228
 742:	7d e0       	ldi	r23, 0x0D	; 13
 744:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <__data_end>
 748:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <__data_end+0x1>
 74c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <data>
 750:	8f ef       	ldi	r24, 0xFF	; 255
 752:	9f e8       	ldi	r25, 0x8F	; 143
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <main+0x240>
 758:	00 c0       	rjmp	.+0      	; 0x75a <main+0x246>
 75a:	00 00       	nop
 75c:	06 cf       	rjmp	.-500    	; 0x56a <main+0x56>

0000075e <strcat>:
 75e:	fb 01       	movw	r30, r22
 760:	dc 01       	movw	r26, r24
 762:	0d 90       	ld	r0, X+
 764:	00 20       	and	r0, r0
 766:	e9 f7       	brne	.-6      	; 0x762 <strcat+0x4>
 768:	11 97       	sbiw	r26, 0x01	; 1
 76a:	01 90       	ld	r0, Z+
 76c:	0d 92       	st	X+, r0
 76e:	00 20       	and	r0, r0
 770:	e1 f7       	brne	.-8      	; 0x76a <strcat+0xc>
 772:	08 95       	ret

00000774 <strrev>:
 774:	dc 01       	movw	r26, r24
 776:	fc 01       	movw	r30, r24
 778:	67 2f       	mov	r22, r23
 77a:	71 91       	ld	r23, Z+
 77c:	77 23       	and	r23, r23
 77e:	e1 f7       	brne	.-8      	; 0x778 <strrev+0x4>
 780:	32 97       	sbiw	r30, 0x02	; 2
 782:	04 c0       	rjmp	.+8      	; 0x78c <strrev+0x18>
 784:	7c 91       	ld	r23, X
 786:	6d 93       	st	X+, r22
 788:	70 83       	st	Z, r23
 78a:	62 91       	ld	r22, -Z
 78c:	ae 17       	cp	r26, r30
 78e:	bf 07       	cpc	r27, r31
 790:	c8 f3       	brcs	.-14     	; 0x784 <strrev+0x10>
 792:	08 95       	ret

00000794 <__itoa_ncheck>:
 794:	bb 27       	eor	r27, r27
 796:	4a 30       	cpi	r20, 0x0A	; 10
 798:	31 f4       	brne	.+12     	; 0x7a6 <__itoa_ncheck+0x12>
 79a:	99 23       	and	r25, r25
 79c:	22 f4       	brpl	.+8      	; 0x7a6 <__itoa_ncheck+0x12>
 79e:	bd e2       	ldi	r27, 0x2D	; 45
 7a0:	90 95       	com	r25
 7a2:	81 95       	neg	r24
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__utoa_common>

000007aa <__utoa_ncheck>:
 7aa:	bb 27       	eor	r27, r27

000007ac <__utoa_common>:
 7ac:	fb 01       	movw	r30, r22
 7ae:	55 27       	eor	r21, r21
 7b0:	aa 27       	eor	r26, r26
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	aa 1f       	adc	r26, r26
 7b8:	a4 17       	cp	r26, r20
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <__utoa_common+0x14>
 7bc:	a4 1b       	sub	r26, r20
 7be:	83 95       	inc	r24
 7c0:	50 51       	subi	r21, 0x10	; 16
 7c2:	b9 f7       	brne	.-18     	; 0x7b2 <__utoa_common+0x6>
 7c4:	a0 5d       	subi	r26, 0xD0	; 208
 7c6:	aa 33       	cpi	r26, 0x3A	; 58
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__utoa_common+0x20>
 7ca:	a9 5d       	subi	r26, 0xD9	; 217
 7cc:	a1 93       	st	Z+, r26
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	79 f7       	brne	.-34     	; 0x7b0 <__utoa_common+0x4>
 7d2:	b1 11       	cpse	r27, r1
 7d4:	b1 93       	st	Z+, r27
 7d6:	11 92       	st	Z+, r1
 7d8:	cb 01       	movw	r24, r22
 7da:	0c 94 ba 03 	jmp	0x774	; 0x774 <strrev>

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
